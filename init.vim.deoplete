 " Install Vim Plug if not installed
    if empty(glob('~/.config/nvim/autoload/plug.vim'))
      silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall
    endif
call plug#begin()

" Deoplete (different loading for Neovim vs Vim)
if has('nvim')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
	Plug 'Shougo/deoplete.nvim'
	Plug 'roxma/nvim-yarp'
	Plug 'roxma/vim-hug-neovim-rpc'
endif

" Language Servers
Plug 'autozimu/LanguageClient-neovim', {
			\ 'branch': 'next',
			\ 'do': 'bash install.sh',
			\ }

" Asynchrynous Linting Engine
"Plug 'w0rp/ale'
Plug 'neomake/neomake'

"Javascript Plugins
Plug 'carlitux/deoplete-ternjs'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install && npm install -g tern' }

"Typescript Plugins
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Quramy/tsuquyomi', { 'do': 'npm install -g typescript' }
Plug 'mhartington/deoplete-typescript'

"Python Plugins
Plug 'zchee/deoplete-jedi'
Plug 'davidhalter/jedi-vim'
Plug 'sbdchd/neoformat'

" Better Language Packs
Plug 'sheerun/vim-polyglot'

" Terminal Vim with 256 colours
Plug 'fisadev/fisa-vim-colorscheme'

" NeoSolarized truecolor theme
Plug 'iCyMind/NeoSolarized'

" Enter brackets, quotes etc. in pairs
Plug 'jiangmiao/auto-pairs'

" neovim-qt
" Plug 'equalsraf/neovim-gui-shim'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Display indentation lines
Plug 'Yggdroot/indentLine'

" Commenter
Plug 'scrooloose/nerdcommenter'

" Tree browser
Plug 'scrooloose/nerdtree'

" Code Folding
Plug 'tmhedberg/SimpylFold'

" Initialise plugin system
call plug#end()

" Put your non-Plugin stuff after this line
"========================================================
"Neovim settings

let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_camel_case = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#max_abbr_width = 0
let g:deoplete#max_menu_width = 0
let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
let g:tern_request_timeout = 1
let g:tern_request_timeout = 6000
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
let g:deoplete#sources#tss#javascript_support = 1
let g:tsuquyomi_javascript_support = 1
let g:tsuquyomi_auto_open = 1
let g:tsuquyomi_disable_quickfix = 1

let g:jedi#completions_enabled = 0
let g:jedi#use_splits_not_buffers = "right"


" Configure C/C++ language server
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

" Configure Javascript server
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
      \ 'name': 'typescript-language-server',
      \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
      \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
      \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx']
      \ })
endif

" Neomake settings
let g:neomake_python_enabled_makers = ['pylint']
let g:neomake_javascript_enabled_makers = ['eslint']
call neomake#configure#automake('nrwi', 500)
let g:neomake_open_list = 2

" automatically close the autocomplete preview window when finished
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif


" Neoformat settings - convert tabs to spaces, align and strip trailing spaces
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_retab = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_enabled_python = ['yapf']
let g:neoformat_enabled_javascript = ['prettier']

" ALE settings
"let g:ale_lint_on_enter = 1
"let g:ale_lint_on_text_changed = 'never'
"let g:ale_linters = {
"			\ 'javascript': ['eslint'],
"			\ 'python': ['pylint'] }


" Change mapleader to comma ','
let mapleader = ',' 

" Line numbers
set number relativenumber

"tabs and spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Set for UTF-8
set encoding=utf-8

" Enable syntax highlighting
syntax enable

"Clipboard settings - unnamed for Windows or MacOS
" unnamedplus for Unix/Linux
set clipboard^=unnamed,unnamedplus

" Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P


" Set character for indented lines
let g:indentLine_char = '‚îÜ'
 
" Key combos for split screens:
"
"    Ctrl+J move to the split below
"    Ctrl+K move to the split above
"    Ctrl+L move to the split to the right
"    Ctrl+H move to the split to the left
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Default python locations
" let g:python_host_prog = '/usr/bin/python2'

let g:python3_host_prog = '/home/jason/anaconda3/bin/python3'

" fix problems with uncommon shells (fish, xonsh) and plugins running commands
" (neomake, ...)
" For Linux, set shell as:
set shell=/bin/bash  
" For Termux
" set shell=/data/data/com.termux/files/usr/bin/bash

" Airline ------------------------------
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'papercolor'
let g:airline#extensions#whitespace#enabled = 0

"Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

"Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'


" Airline unicode symbols
" Uncomment these and disable the Powerline symbols to use
"let g:airline_left_sep = '‚ñ∂'
"let g:airline_right_sep = '‚óÄ'
"let g:airline_left_sep = '¬ª'
"let g:airline_right_sep = '¬´'
"let g:airline_symbols.readonly = 'üîí'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.maxlinenr = '„èë'
"let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.notexists = '‚àÑ'

" Colour schemes

set guifont=Roboto\ Mono\ for\ Powerline\ 14
set termguicolors
set background=dark
colorscheme NeoSolarized

" Fisadev's dark colour scheme is a nice alternative in text mode
" let &t_Co = 256
" colorscheme fisa
" AirlineTheme bubblegum

" Two new user-defined commands to select Fisa or NeoSolarized colours
" with matching Airline themes (bubblegum and papercolor respectively)
command SolarPaper set termguicolors | set background=dark | colorscheme NeoSolarized | AirlineTheme papercolor
command Fisa let &t_Co =256 | colorscheme fisa | AirlineTheme bubblegum

